// Code generated by ent, DO NOT EDIT.

package aitask

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/chaitin/MonkeyCode/backend/db/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.AITask {
	return predicate.AITask(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.AITask {
	return predicate.AITask(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.AITask {
	return predicate.AITask(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.AITask {
	return predicate.AITask(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.AITask {
	return predicate.AITask(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.AITask {
	return predicate.AITask(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.AITask {
	return predicate.AITask(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.AITask {
	return predicate.AITask(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.AITask {
	return predicate.AITask(sql.FieldLTE(FieldID, id))
}

// EmployeeID applies equality check predicate on the "employee_id" field. It's identical to EmployeeIDEQ.
func EmployeeID(v uuid.UUID) predicate.AITask {
	return predicate.AITask(sql.FieldEQ(FieldEmployeeID, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.AITask {
	return predicate.AITask(sql.FieldEQ(FieldStatus, v))
}

// Output applies equality check predicate on the "output" field. It's identical to OutputEQ.
func Output(v string) predicate.AITask {
	return predicate.AITask(sql.FieldEQ(FieldOutput, v))
}

// Logs applies equality check predicate on the "logs" field. It's identical to LogsEQ.
func Logs(v string) predicate.AITask {
	return predicate.AITask(sql.FieldEQ(FieldLogs, v))
}

// ErrorMessage applies equality check predicate on the "error_message" field. It's identical to ErrorMessageEQ.
func ErrorMessage(v string) predicate.AITask {
	return predicate.AITask(sql.FieldEQ(FieldErrorMessage, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.AITask {
	return predicate.AITask(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.AITask {
	return predicate.AITask(sql.FieldEQ(FieldUpdatedAt, v))
}

// EmployeeIDEQ applies the EQ predicate on the "employee_id" field.
func EmployeeIDEQ(v uuid.UUID) predicate.AITask {
	return predicate.AITask(sql.FieldEQ(FieldEmployeeID, v))
}

// EmployeeIDNEQ applies the NEQ predicate on the "employee_id" field.
func EmployeeIDNEQ(v uuid.UUID) predicate.AITask {
	return predicate.AITask(sql.FieldNEQ(FieldEmployeeID, v))
}

// EmployeeIDIn applies the In predicate on the "employee_id" field.
func EmployeeIDIn(vs ...uuid.UUID) predicate.AITask {
	return predicate.AITask(sql.FieldIn(FieldEmployeeID, vs...))
}

// EmployeeIDNotIn applies the NotIn predicate on the "employee_id" field.
func EmployeeIDNotIn(vs ...uuid.UUID) predicate.AITask {
	return predicate.AITask(sql.FieldNotIn(FieldEmployeeID, vs...))
}

// EmployeeIDGT applies the GT predicate on the "employee_id" field.
func EmployeeIDGT(v uuid.UUID) predicate.AITask {
	return predicate.AITask(sql.FieldGT(FieldEmployeeID, v))
}

// EmployeeIDGTE applies the GTE predicate on the "employee_id" field.
func EmployeeIDGTE(v uuid.UUID) predicate.AITask {
	return predicate.AITask(sql.FieldGTE(FieldEmployeeID, v))
}

// EmployeeIDLT applies the LT predicate on the "employee_id" field.
func EmployeeIDLT(v uuid.UUID) predicate.AITask {
	return predicate.AITask(sql.FieldLT(FieldEmployeeID, v))
}

// EmployeeIDLTE applies the LTE predicate on the "employee_id" field.
func EmployeeIDLTE(v uuid.UUID) predicate.AITask {
	return predicate.AITask(sql.FieldLTE(FieldEmployeeID, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.AITask {
	return predicate.AITask(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.AITask {
	return predicate.AITask(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.AITask {
	return predicate.AITask(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.AITask {
	return predicate.AITask(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.AITask {
	return predicate.AITask(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.AITask {
	return predicate.AITask(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.AITask {
	return predicate.AITask(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.AITask {
	return predicate.AITask(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.AITask {
	return predicate.AITask(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.AITask {
	return predicate.AITask(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.AITask {
	return predicate.AITask(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.AITask {
	return predicate.AITask(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.AITask {
	return predicate.AITask(sql.FieldContainsFold(FieldStatus, v))
}

// OutputEQ applies the EQ predicate on the "output" field.
func OutputEQ(v string) predicate.AITask {
	return predicate.AITask(sql.FieldEQ(FieldOutput, v))
}

// OutputNEQ applies the NEQ predicate on the "output" field.
func OutputNEQ(v string) predicate.AITask {
	return predicate.AITask(sql.FieldNEQ(FieldOutput, v))
}

// OutputIn applies the In predicate on the "output" field.
func OutputIn(vs ...string) predicate.AITask {
	return predicate.AITask(sql.FieldIn(FieldOutput, vs...))
}

// OutputNotIn applies the NotIn predicate on the "output" field.
func OutputNotIn(vs ...string) predicate.AITask {
	return predicate.AITask(sql.FieldNotIn(FieldOutput, vs...))
}

// OutputGT applies the GT predicate on the "output" field.
func OutputGT(v string) predicate.AITask {
	return predicate.AITask(sql.FieldGT(FieldOutput, v))
}

// OutputGTE applies the GTE predicate on the "output" field.
func OutputGTE(v string) predicate.AITask {
	return predicate.AITask(sql.FieldGTE(FieldOutput, v))
}

// OutputLT applies the LT predicate on the "output" field.
func OutputLT(v string) predicate.AITask {
	return predicate.AITask(sql.FieldLT(FieldOutput, v))
}

// OutputLTE applies the LTE predicate on the "output" field.
func OutputLTE(v string) predicate.AITask {
	return predicate.AITask(sql.FieldLTE(FieldOutput, v))
}

// OutputContains applies the Contains predicate on the "output" field.
func OutputContains(v string) predicate.AITask {
	return predicate.AITask(sql.FieldContains(FieldOutput, v))
}

// OutputHasPrefix applies the HasPrefix predicate on the "output" field.
func OutputHasPrefix(v string) predicate.AITask {
	return predicate.AITask(sql.FieldHasPrefix(FieldOutput, v))
}

// OutputHasSuffix applies the HasSuffix predicate on the "output" field.
func OutputHasSuffix(v string) predicate.AITask {
	return predicate.AITask(sql.FieldHasSuffix(FieldOutput, v))
}

// OutputIsNil applies the IsNil predicate on the "output" field.
func OutputIsNil() predicate.AITask {
	return predicate.AITask(sql.FieldIsNull(FieldOutput))
}

// OutputNotNil applies the NotNil predicate on the "output" field.
func OutputNotNil() predicate.AITask {
	return predicate.AITask(sql.FieldNotNull(FieldOutput))
}

// OutputEqualFold applies the EqualFold predicate on the "output" field.
func OutputEqualFold(v string) predicate.AITask {
	return predicate.AITask(sql.FieldEqualFold(FieldOutput, v))
}

// OutputContainsFold applies the ContainsFold predicate on the "output" field.
func OutputContainsFold(v string) predicate.AITask {
	return predicate.AITask(sql.FieldContainsFold(FieldOutput, v))
}

// LogsEQ applies the EQ predicate on the "logs" field.
func LogsEQ(v string) predicate.AITask {
	return predicate.AITask(sql.FieldEQ(FieldLogs, v))
}

// LogsNEQ applies the NEQ predicate on the "logs" field.
func LogsNEQ(v string) predicate.AITask {
	return predicate.AITask(sql.FieldNEQ(FieldLogs, v))
}

// LogsIn applies the In predicate on the "logs" field.
func LogsIn(vs ...string) predicate.AITask {
	return predicate.AITask(sql.FieldIn(FieldLogs, vs...))
}

// LogsNotIn applies the NotIn predicate on the "logs" field.
func LogsNotIn(vs ...string) predicate.AITask {
	return predicate.AITask(sql.FieldNotIn(FieldLogs, vs...))
}

// LogsGT applies the GT predicate on the "logs" field.
func LogsGT(v string) predicate.AITask {
	return predicate.AITask(sql.FieldGT(FieldLogs, v))
}

// LogsGTE applies the GTE predicate on the "logs" field.
func LogsGTE(v string) predicate.AITask {
	return predicate.AITask(sql.FieldGTE(FieldLogs, v))
}

// LogsLT applies the LT predicate on the "logs" field.
func LogsLT(v string) predicate.AITask {
	return predicate.AITask(sql.FieldLT(FieldLogs, v))
}

// LogsLTE applies the LTE predicate on the "logs" field.
func LogsLTE(v string) predicate.AITask {
	return predicate.AITask(sql.FieldLTE(FieldLogs, v))
}

// LogsContains applies the Contains predicate on the "logs" field.
func LogsContains(v string) predicate.AITask {
	return predicate.AITask(sql.FieldContains(FieldLogs, v))
}

// LogsHasPrefix applies the HasPrefix predicate on the "logs" field.
func LogsHasPrefix(v string) predicate.AITask {
	return predicate.AITask(sql.FieldHasPrefix(FieldLogs, v))
}

// LogsHasSuffix applies the HasSuffix predicate on the "logs" field.
func LogsHasSuffix(v string) predicate.AITask {
	return predicate.AITask(sql.FieldHasSuffix(FieldLogs, v))
}

// LogsIsNil applies the IsNil predicate on the "logs" field.
func LogsIsNil() predicate.AITask {
	return predicate.AITask(sql.FieldIsNull(FieldLogs))
}

// LogsNotNil applies the NotNil predicate on the "logs" field.
func LogsNotNil() predicate.AITask {
	return predicate.AITask(sql.FieldNotNull(FieldLogs))
}

// LogsEqualFold applies the EqualFold predicate on the "logs" field.
func LogsEqualFold(v string) predicate.AITask {
	return predicate.AITask(sql.FieldEqualFold(FieldLogs, v))
}

// LogsContainsFold applies the ContainsFold predicate on the "logs" field.
func LogsContainsFold(v string) predicate.AITask {
	return predicate.AITask(sql.FieldContainsFold(FieldLogs, v))
}

// ErrorMessageEQ applies the EQ predicate on the "error_message" field.
func ErrorMessageEQ(v string) predicate.AITask {
	return predicate.AITask(sql.FieldEQ(FieldErrorMessage, v))
}

// ErrorMessageNEQ applies the NEQ predicate on the "error_message" field.
func ErrorMessageNEQ(v string) predicate.AITask {
	return predicate.AITask(sql.FieldNEQ(FieldErrorMessage, v))
}

// ErrorMessageIn applies the In predicate on the "error_message" field.
func ErrorMessageIn(vs ...string) predicate.AITask {
	return predicate.AITask(sql.FieldIn(FieldErrorMessage, vs...))
}

// ErrorMessageNotIn applies the NotIn predicate on the "error_message" field.
func ErrorMessageNotIn(vs ...string) predicate.AITask {
	return predicate.AITask(sql.FieldNotIn(FieldErrorMessage, vs...))
}

// ErrorMessageGT applies the GT predicate on the "error_message" field.
func ErrorMessageGT(v string) predicate.AITask {
	return predicate.AITask(sql.FieldGT(FieldErrorMessage, v))
}

// ErrorMessageGTE applies the GTE predicate on the "error_message" field.
func ErrorMessageGTE(v string) predicate.AITask {
	return predicate.AITask(sql.FieldGTE(FieldErrorMessage, v))
}

// ErrorMessageLT applies the LT predicate on the "error_message" field.
func ErrorMessageLT(v string) predicate.AITask {
	return predicate.AITask(sql.FieldLT(FieldErrorMessage, v))
}

// ErrorMessageLTE applies the LTE predicate on the "error_message" field.
func ErrorMessageLTE(v string) predicate.AITask {
	return predicate.AITask(sql.FieldLTE(FieldErrorMessage, v))
}

// ErrorMessageContains applies the Contains predicate on the "error_message" field.
func ErrorMessageContains(v string) predicate.AITask {
	return predicate.AITask(sql.FieldContains(FieldErrorMessage, v))
}

// ErrorMessageHasPrefix applies the HasPrefix predicate on the "error_message" field.
func ErrorMessageHasPrefix(v string) predicate.AITask {
	return predicate.AITask(sql.FieldHasPrefix(FieldErrorMessage, v))
}

// ErrorMessageHasSuffix applies the HasSuffix predicate on the "error_message" field.
func ErrorMessageHasSuffix(v string) predicate.AITask {
	return predicate.AITask(sql.FieldHasSuffix(FieldErrorMessage, v))
}

// ErrorMessageIsNil applies the IsNil predicate on the "error_message" field.
func ErrorMessageIsNil() predicate.AITask {
	return predicate.AITask(sql.FieldIsNull(FieldErrorMessage))
}

// ErrorMessageNotNil applies the NotNil predicate on the "error_message" field.
func ErrorMessageNotNil() predicate.AITask {
	return predicate.AITask(sql.FieldNotNull(FieldErrorMessage))
}

// ErrorMessageEqualFold applies the EqualFold predicate on the "error_message" field.
func ErrorMessageEqualFold(v string) predicate.AITask {
	return predicate.AITask(sql.FieldEqualFold(FieldErrorMessage, v))
}

// ErrorMessageContainsFold applies the ContainsFold predicate on the "error_message" field.
func ErrorMessageContainsFold(v string) predicate.AITask {
	return predicate.AITask(sql.FieldContainsFold(FieldErrorMessage, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.AITask {
	return predicate.AITask(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.AITask {
	return predicate.AITask(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.AITask {
	return predicate.AITask(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.AITask {
	return predicate.AITask(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.AITask {
	return predicate.AITask(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.AITask {
	return predicate.AITask(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.AITask {
	return predicate.AITask(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.AITask {
	return predicate.AITask(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.AITask {
	return predicate.AITask(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.AITask {
	return predicate.AITask(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.AITask {
	return predicate.AITask(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.AITask {
	return predicate.AITask(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.AITask {
	return predicate.AITask(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.AITask {
	return predicate.AITask(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.AITask {
	return predicate.AITask(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.AITask {
	return predicate.AITask(sql.FieldLTE(FieldUpdatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AITask) predicate.AITask {
	return predicate.AITask(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AITask) predicate.AITask {
	return predicate.AITask(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AITask) predicate.AITask {
	return predicate.AITask(sql.NotPredicates(p))
}
